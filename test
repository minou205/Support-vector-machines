#include<stdio.h>
#include<stdlib.h>

struct game{
int rows;
int colomns;
int bombs;
}M;


void show_M(int r,int c,int m[r][c],int ch[r][c]){
int i , j ;
system("cls");


for (i = 0 ; i <= c-1 ; i++){
    printf("\t%d",i+1);
}
printf("\n\n\n");
for (i = 0 ; i <= r-1 ; i++){
    printf("%d",i+1);
    for (j = 0 ; j <= c-1 ; j++){
        if(ch[i][j]==0){
            printf("\t??");
            /*printf("\t%d",m[i][j]);*/
        }else{
            printf("\t%d",m[i][j]);
        }
    }
printf("\n\n");
}
}





int main(){

int k;
do{


int i,j,M_size;
system("cls");
printf("Hello Mr Player ;\n\tChoose the mode of the game :\n\t\t-1- Beginner 8*8*10\n\t\t-2- Intermediate 12*12*25\n\t\t-3- Expert 12*20*50");
printf("\nyour choice is : ");
scanf("%d",&M_size);
if (M_size == 1){
    M.rows = 8;
    M.colomns = 8;
    M.bombs = 10;
}
if (M_size == 2){
    M.rows = 12;
    M.colomns = 12;
    M.bombs = 25;
}
if (M_size == 3){
    M.rows = 12;
    M.colomns = 20;
    M.bombs = 50;
}
int Matrix[M.rows][M.colomns];






for (i = 0 ; i <= M.rows-1 ; i++){
    for (j = 0 ; j <= M.colomns-1 ; j++){
            Matrix[i][j] = 0;
    }
}


i=0;
while(i < M.bombs){
    if (Matrix[rand()%M.rows][rand()%M.colomns] != 100){
            Matrix[rand()%M.rows][rand()%M.colomns] = 100;
            i++;
    }
}



int SB;

for (i = 0 ; i <= M.rows-1 ; i++){
    for (j = 0 ; j <= M.colomns-1 ; j++){
            SB=0;
            if(Matrix[i][j]!=100){
                    if(Matrix[i][j+1]==100 && (i>=0 && i<=M.rows-1) &&(j+1>=0 && j+1<=M.colomns-1)){
                        SB++;
                    }
                    if(Matrix[i][j-1]==100 && (i>=0 && i<=M.rows-1) &&(j-1>=0 && j-1<=M.colomns-1)){
                        SB++;
                    }
                    if(Matrix[i+1][j]==100 && (i+1>=0 && i+1<=M.rows-1) &&(j>=0 && j<=M.colomns-1)){
                        SB++;
                    }
                    if(Matrix[i+1][j+1]==100 && (i+1>=0 && i+1<=M.rows-1) &&(j+1>=0 && j+1<=M.colomns-1)){
                        SB++;
                    }
                    if(Matrix[i+1][j-1]==100 && (i+1>=0 && i+1<=M.rows-1) &&(j-1>=0 && j-1<=M.colomns-1)){
                        SB++;
                    }
                    if(Matrix[i-1][j]==100 && (i-1>=0 && i-1<=M.rows-1) &&(j>=0 && j<=M.colomns-1)){
                        SB++;
                    }
                    if(Matrix[i-1][j+1]==100 && (i-1>=0 && i-1<=M.rows-1) &&(j+1>=0 && j+1<=M.colomns-1)){
                        SB++;
                    }
                    if(Matrix[i-1][j-1]==100 && (i-1>=0 && i-1<=M.rows-1) &&(j-1>=0 && j-1<=M.colomns-1)){
                        SB++;
                    }
                    Matrix[i][j]=SB;

            }
    }
}






int ch[M.rows][M.colomns];
for (i = 0 ; i <= M.rows-1 ; i++){
    for (j = 0 ; j <= M.colomns-1 ; j++){
            ch[i][j] = 0;
    }
}







int win=0,lost=0;
while (win==0 && lost==0){
    show_M(M.rows,M.colomns,Matrix,ch);
    int SR,SC;
    printf("\n\n choose a row : ");
    scanf("%d",&SR);
    printf("\n\n choose a colomn : ");
    scanf("%d",&SC);
    ch[SR-1][SC-1]=1;
    if (Matrix[SR-1][SC-1]==100)
        lost = 1 ;

    int v;
    do{
    v=0;
    for (i = 0 ; i <= M.rows-1 ; i++){
            for (j = 0 ; j <= M.colomns-1 ; j++){
                if (Matrix[i][j]==0 && ch[i][j]==1){
                    if(ch[i][j+1]==0 && (i>=0 && i<=M.rows-1) &&(j+1>=0 && j+1<=M.colomns-1)){
                        ch[i][j+1]=1;
                        v++;
                    }
                    if(ch[i][j-1]==0 && (i>=0 && i<=M.rows-1) &&(j-1>=0 && j-1<=M.colomns-1)){
                        ch[i][j-1]=1;
                        v++;
                    }
                    if(ch[i+1][j]==0 && (i+1>=0 && i+1<=M.rows-1) &&(j>=0 && j<=M.colomns-1)){
                        ch[i+1][j]=1;
                        v++;
                    }
                    if(ch[i+1][j+1]==0 && (i+1>=0 && i+1<=M.rows-1) &&(j+1>=0 && j+1<=M.colomns-1)){
                        ch[i+1][j+1]=1;
                        v++;
                    }
                    if(ch[i+1][j-1]==0 && (i+1>=0 && i+1<=M.rows-1) &&(j-1>=0 && j-1<=M.colomns-1)){
                        ch[i+1][j-1]=1;
                        v++;
                    }
                    if(ch[i-1][j]==0 && (i-1>=0 && i-1<=M.rows-1) &&(j>=0 && j<=M.colomns-1)){
                        ch[i-1][j]=1;
                        v++;
                    }
                    if(ch[i-1][j+1]==0 && (i-1>=0 && i-1<=M.rows-1) &&(j+1>=0 && j+1<=M.colomns-1)){
                        ch[i-1][j+1]=1;
                        v++;
                    }
                    if(ch[i-1][j-1]==0 && (i-1>=0 && i-1<=M.rows-1) &&(j-1>=0 && j-1<=M.colomns-1)){
                        ch[i-1][j-1]=1;
                        v++;
                    }
                }
            }
    }
    }while(v>0);

}

show_M(M.rows,M.colomns,Matrix,ch);
printf("enter anything to continue : ");
scanf("%d",&i);
system ("cls");
printf("you lost");
printf("\n\t replay [1] \t\t close [0]\n\tChoose : ");
scanf("%d",&k);

}while(k!=0);





return 0;
}
